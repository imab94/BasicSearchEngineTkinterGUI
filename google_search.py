#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 01, 2019 10:42:25 PM

import sys
import wikipedia
from tkinter import messagebox
try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import google_search_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    google_search_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    google_search_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font11 = "-family {Segoe UI} -size 16 -weight bold -slant "  \
            "italic -underline 0 -overstrike 0"
        font12 = "-family {Courier New} -size 14 -weight normal -slant"  \
            " italic -underline 0 -overstrike 0"
        font13 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("684x361+441+155")
        top.resizable(0,0)
        top.title("Basic Search Engine")
        top.configure(background="#d9d9d9")



        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.0, rely=0.11, relheight=0.29, relwidth=1.0)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(width=685)

        self.entry_text = Entry(self.Frame1)
        self.entry_text.place(relx=0.25, rely=0.19,height=30, relwidth=0.49)
        self.entry_text.configure(background="white")
        self.entry_text.configure(borderwidth="2")
        self.entry_text.configure(disabledforeground="#a3a3a3")
        self.entry_text.configure(font=font12)
        self.entry_text.configure(foreground="#000000")
        self.entry_text.configure(insertbackground="black")
        self.entry_text.configure(width=334)

        self.search_btn = Button(self.Frame1,command=self.getDetails)
        self.search_btn.place(relx=0.30, rely=0.57, height=34, width=117)
        self.search_btn.configure(activebackground="#d9d9d9")
        self.search_btn.configure(activeforeground="#000000")
        self.search_btn.configure(background="#2a0fd8")
        self.search_btn.configure(disabledforeground="#a3a3a3")
        self.search_btn.configure(font=font13)
        self.search_btn.configure(foreground="#40ef1d")
        self.search_btn.configure(highlightbackground="#d9d9d9")
        self.search_btn.configure(highlightcolor="black")
        self.search_btn.configure(pady="0")
        self.search_btn.configure(text='''Search''')
        self.search_btn.configure(width=117)

        self.clear_btn = Button(self.Frame1, command=self.clearTexts)
        self.clear_btn.place(relx=0.60, rely=0.57, height=34, width=117)
        self.clear_btn.configure(activebackground="#d9d9d9")
        self.clear_btn.configure(activeforeground="#000000")
        self.clear_btn.configure(background="#2a0fd8")
        self.clear_btn.configure(disabledforeground="#a3a3a3")
        self.clear_btn.configure(font=font13)
        self.clear_btn.configure(foreground="#40ef1d")
        self.clear_btn.configure(highlightbackground="#d9d9d9")
        self.clear_btn.configure(highlightcolor="black")
        self.clear_btn.configure(pady="0")
        self.clear_btn.configure(text='''Clear''')
        self.clear_btn.configure(width=117)


        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.0, rely=0.44, relheight=0.57, relwidth=1.0)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(width=685)

        self.answer_text = ScrolledText(self.Frame2)
        self.answer_text.place(relx=0.0, rely=0.0, relheight=0.98, relwidth=0.99)

        self.answer_text.configure(background="white",wrap = WORD)
        self.answer_text.configure(font=('arial',13,'italic'))
        self.answer_text.configure(foreground="black")
        self.answer_text.configure(highlightbackground="#d9d9d9")
        self.answer_text.configure(highlightcolor="black")
        self.answer_text.configure(insertbackground="black")
        self.answer_text.configure(insertborderwidth="3")
        self.answer_text.configure(selectbackground="#c4c4c4")
        self.answer_text.configure(selectforeground="black")
        self.answer_text.configure(width=10)

        self.Search = Label(top)
        self.Search.place(relx=0.29, rely=0.0, height=31, width=284)
        self.Search.configure(background="#d9d9d9")
        self.Search.configure(disabledforeground="#a3a3a3")
        self.Search.configure(font=font11)
        self.Search.configure(foreground="#000000")
        self.Search.configure(text='''Search Here''')
        self.Search.configure(width=284)


    def getDetails(self):
        searchText = self.entry_text.get()
        if searchText != "":
            anserText = wikipedia.summary(searchText)
            listData = anserText.split(".")
            self.answer_text.delete('end-1c',END)
            for lines in listData:
                self.answer_text.insert(1.0,lines)
                self.answer_text.insert(1.0,"\n")

        else :
            messagebox.showerror('Error','text can\'t be empty!')


    def clearTexts(self):
        self.answer_text.delete(1.0, END)
        self.entry_text.delete(0, END)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



